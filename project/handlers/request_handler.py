from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from datetime import datetime
from pathlib import Path
import json
from project.config import ADMIN_ID

router = Router()

BASE_DIR = Path(__file__).parent.parent
DEALER_FILES_DIR = BASE_DIR / "dealer_files"
DEALER_CODES_FILE = BASE_DIR / "dealer_codes.json"
DEALER_FILES_DIR.mkdir(parents=True, exist_ok=True)


class RequestStates(StatesGroup):
    waiting_dealer_code = State()
    waiting_problem_description = State()
    choose_media = State()
    choose_photos = State()
    choose_video = State()
    confirm_finish = State()
    adding_photos = State()
    adding_videos = State()


def load_dealer_codes():
    try:
        if DEALER_CODES_FILE.exists():
            with open(DEALER_CODES_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {}
    except Exception as e:
        print(f"Error loading dealer codes: {e}")
        return {}


def save_dealer_codes(codes):
    try:
        with open(DEALER_CODES_FILE, 'w', encoding='utf-8') as f:
            json.dump(codes, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"Error saving dealer codes: {e}")


def create_dealer_folder(dealer_code: str) -> Path:
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π –æ—Ç 1 –¥–æ 99"""
    today = datetime.now().strftime("%Y-%m-%d")
    dealer_date_dir = DEALER_FILES_DIR / dealer_code / today

    request_num = 1
    while request_num <= 99:
        request_folder = dealer_date_dir / f"request_{request_num}"
        if not request_folder.exists():
            request_folder.mkdir(parents=True, exist_ok=True)
            return request_folder
        request_num += 1

    raise ValueError("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç: 99 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å –æ—Ç –æ–¥–Ω–æ–≥–æ –¥–∏–ª–µ—Ä–∞")


def get_main_kb() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="Start", callback_data="start_request")
    builder.button(text="Help", callback_data="help")
    builder.adjust(1)
    return builder.as_markup()


def get_reply_kb() -> ReplyKeyboardMarkup:
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ Start –∏ Help (–∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞)"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üöÄ Start"), KeyboardButton(text="‚ÑπÔ∏è Help")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
    )


def remove_keyboard() -> ReplyKeyboardMarkup:
    """–£–±–∏—Ä–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    return ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True)


@router.message(F.text == "üöÄ Start")
async def handle_start_button(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ Start –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    dealer_codes = load_dealer_codes()
    user_id = str(message.from_user.id)

    if user_id not in dealer_codes:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–∏–ª–µ—Ä–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start", reply_markup=get_reply_kb())
        return

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –¥–∏–ª–µ—Ä–∞
    dealer_code = dealer_codes[user_id]

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–¥–æ–º –¥–∏–ª–µ—Ä–∞
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –í–∞—à –∫–æ–¥ –¥–∏–ª–µ—Ä–∞: {dealer_code}",
        reply_markup=remove_keyboard()
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –¥–∏–ª–µ—Ä–∞ –≤ state
    await state.update_data(dealer_code=dealer_code)

    await message.answer("–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:")
    await state.set_state(RequestStates.waiting_problem_description)


@router.message(F.text == "‚ÑπÔ∏è Help")
async def handle_help_button(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ Help –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    help_text = (
        "üìå <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º</b>\n\n"
        "1. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–∏–ª–µ—Ä–∞ (—Ñ–æ—Ä–º–∞—Ç: H-00-000 –∏–ª–∏ PY-00-000)\n"
        "2. –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Ç–µ–∫—Å—Ç–æ–º\n"
        "3. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ (–º–∞–∫—Å. 20 —Ñ–∞–π–ª–æ–≤)\n"
        "4. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É\n\n"
        "–ö–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–∞–ø–∫—É.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ 'üöÄ Start' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å!"
    )
    await message.answer(help_text, parse_mode="HTML", reply_markup=get_reply_kb())


@router.callback_query(F.data == "help")
async def show_help(callback: types.CallbackQuery):
    help_text = (
        "üìå <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º</b>\n\n"
        "1. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–∏–ª–µ—Ä–∞ (—Ñ–æ—Ä–º–∞—Ç: H-00-000 –∏–ª–∏ PY-00-000)\n"
        "2. –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Ç–µ–∫—Å—Ç–æ–º\n"
        "3. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ (–º–∞–∫—Å. 20 —Ñ–∞–π–ª–æ–≤)\n"
        "4. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É\n\n"
        "–ö–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–∞–ø–∫—É."
    )
    await callback.message.answer(help_text, parse_mode="HTML", reply_markup=get_reply_kb())
    await callback.answer()


def get_media_kb() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="–§–æ—Ç–æ", callback_data="photo")
    builder.button(text="–í–∏–¥–µ–æ", callback_data="video")
    builder.adjust(1)
    return builder.as_markup()


def get_continue_media_kb(is_photo: bool) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    if is_photo:
        builder.button(text="–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ", callback_data="continue_photo")
        builder.button(text="–î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ", callback_data="switch_to_video")
    else:
        builder.button(text="–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –≤–∏–¥–µ–æ", callback_data="continue_video")
        builder.button(text="–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="switch_to_photo")
    builder.button(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ", callback_data="finish_media")
    builder.adjust(2, 1)
    return builder.as_markup()


def get_finish_kb() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="finish")
    builder.button(text="–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart")
    builder.adjust(1)
    return builder.as_markup()


@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    dealer_codes = load_dealer_codes()
    user_id = str(message.from_user.id)

    print(f"User {user_id} started. Dealer codes: {dealer_codes}")

    if user_id in dealer_codes:
        dealer_code = dealer_codes[user_id]
        await message.answer(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!\n"
            f"–í–∞—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–æ–¥ –¥–∏–ª–µ—Ä–∞: {dealer_code}\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üöÄ Start' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å",
            reply_markup=get_reply_kb()
        )
    else:
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –¥–∏–ª–µ—Ä—Å–∫–∏–π –∫–æ–¥ (—Ñ–æ—Ä–º–∞—Ç: H-00-000 –∏–ª–∏ PY-00-000):",
            reply_markup=remove_keyboard()
        )
        await state.set_state(RequestStates.waiting_dealer_code)


def is_valid_dealer_code(code: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–¥–∞ –¥–∏–ª–µ—Ä–∞"""
    if not (code.startswith('H-') or code.startswith('PY-')):
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É: H-00-000 (8 —Å–∏–º–≤–æ–ª–æ–≤) –∏–ª–∏ PY-00-000 (9 —Å–∏–º–≤–æ–ª–æ–≤)
    if code.startswith('H-') and len(code) != 8:
        return False
    if code.startswith('PY-') and len(code) != 9:
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ—Å–ª–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –∏–¥—É—Ç —Ü–∏—Ñ—Ä—ã –∏ –¥–µ—Ñ–∏—Å—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    parts = code.split('-')
    if len(parts) != 3:
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Ç–æ—Ä–∞—è –∏ —Ç—Ä–µ—Ç—å—è —á–∞—Å—Ç–∏ —Å–æ—Å—Ç–æ—è—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä
    return parts[1].isdigit() and parts[2].isdigit()


@router.message(RequestStates.waiting_dealer_code)
async def process_dealer_code(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –¥–∏–ª–µ—Ä–∞"""
    dealer_code = message.text.strip().upper()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–¥–∞ –¥–∏–ª–µ—Ä–∞
    if not is_valid_dealer_code(dealer_code):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ H-00-000 –∏–ª–∏ PY-00-000")
        return

    user_id = str(message.from_user.id)
    dealer_codes = load_dealer_codes()
    dealer_codes[user_id] = dealer_code
    save_dealer_codes(dealer_codes)

    await state.update_data(dealer_code=dealer_code)

    await message.answer(
        f"‚úÖ –ö–æ–¥ {dealer_code} —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üöÄ Start' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å",
        reply_markup=get_reply_kb()
    )
    await state.clear()


@router.callback_query(F.data == "start_request")
async def start_request(callback: types.CallbackQuery, state: FSMContext):
    dealer_codes = load_dealer_codes()
    user_id = str(callback.from_user.id)

    print(f"Start pressed by {user_id}. Dealer codes: {dealer_codes}")

    if user_id not in dealer_codes:
        await callback.message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–∏–ª–µ—Ä–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start",
                                      reply_markup=get_reply_kb())
        await callback.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –¥–∏–ª–µ—Ä–∞
    dealer_code = dealer_codes[user_id]

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–¥–æ–º –¥–∏–ª–µ—Ä–∞
    await callback.message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {callback.from_user.first_name}! –í–∞—à –∫–æ–¥ –¥–∏–ª–µ—Ä–∞: {dealer_code}",
        reply_markup=remove_keyboard()
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –¥–∏–ª–µ—Ä–∞ –≤ state
    await state.update_data(dealer_code=dealer_code)

    await callback.message.answer("–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:")
    await state.set_state(RequestStates.waiting_problem_description)
    await callback.answer()


@router.message(RequestStates.waiting_problem_description)
async def save_problem_description(message: types.Message, state: FSMContext):
    if not message.text:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç!")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = await state.get_data()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–¥–∞ –¥–∏–ª–µ—Ä–∞
    if "dealer_code" not in user_data:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤
        dealer_codes = load_dealer_codes()
        user_id = str(message.from_user.id)

        if user_id in dealer_codes:
            dealer_code = dealer_codes[user_id]
            await state.update_data(dealer_code=dealer_code)
            user_data["dealer_code"] = dealer_code
        else:
            await message.answer("‚ùå –ö–æ–¥ –¥–∏–ª–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start", reply_markup=get_reply_kb())
            await state.clear()
            return

    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        request_folder = create_dealer_folder(user_data["dealer_code"])
    except ValueError as e:
        await message.answer(str(e))
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    with open(request_folder / "description.txt", "w", encoding="utf-8") as f:
        f.write(message.text)

    await state.update_data(
        problem_description=message.text,
        photos=[],
        videos=[],
        current_request_folder=str(request_folder)
    )

    await message.answer("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
    await message.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:", reply_markup=get_media_kb())
    await state.set_state(RequestStates.choose_media)


@router.callback_query(RequestStates.choose_media)
async def choose_media(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "photo":
        await callback.message.answer(
            "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ–±–ª–µ–º—ã\n"
            "‚ö†Ô∏è –ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG/PNG",
            reply_markup=remove_keyboard()
        )
        await state.set_state(RequestStates.adding_photos)
    else:
        await callback.message.answer(
            "üé• –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –ø—Ä–æ–±–ª–µ–º—ã\n"
            "‚ö†Ô∏è –ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ MP4/MPEG",
            reply_markup=remove_keyboard()
        )
        await state.set_state(RequestStates.adding_videos)
    await callback.answer()


@router.message(RequestStates.adding_photos)
async def handle_photo_input(message: Message, state: FSMContext):
    if not message.photo:
        await message.answer(
            "‚ùå –≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ!\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG/PNG",
            reply_markup=get_continue_media_kb(is_photo=True)
        )
        return

    # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ
    user_data = await state.get_data()
    request_folder = Path(user_data["current_request_folder"])

    photo_num = len(list(request_folder.glob("photo_*.jpg"))) + 1
    if photo_num > 20:
        await message.answer("‚ùå –õ–∏–º–∏—Ç: 20 —Ñ–æ—Ç–æ –Ω–∞ –∑–∞–ø—Ä–æ—Å")
        return

    try:
        photo = message.photo[-1]
        file = await message.bot.get_file(photo.file_id)
        await message.bot.download_file(
            file.file_path,
            destination=request_folder / f"photo_{photo_num}.jpg"
        )

        photos = user_data.get("photos", [])
        photos.append(f"photo_{photo_num}.jpg")
        await state.update_data(photos=photos)

        await message.answer(
            f"‚úÖ –§–æ—Ç–æ {photo_num} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ",
            reply_markup=get_continue_media_kb(is_photo=True)
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")


@router.message(RequestStates.adding_videos)
async def handle_video_input(message: Message, state: FSMContext):
    if not message.video:
        await message.answer(
            "‚ùå –≠—Ç–æ –Ω–µ –≤–∏–¥–µ–æ!\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ MP4/MPEG",
            reply_markup=get_continue_media_kb(is_photo=False)
        )
        return

    # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ
    user_data = await state.get_data()
    request_folder = Path(user_data["current_request_folder"])

    video_num = len(list(request_folder.glob("video_*.mp4"))) + 1
    if video_num > 20:
        await message.answer("‚ùå –õ–∏–º–∏—Ç: 20 –≤–∏–¥–µ–æ –Ω–∞ –∑–∞–ø—Ä–æ—Å")
        return

    try:
        video = message.video
        file = await message.bot.get_file(video.file_id)
        await message.bot.download_file(
            file.file_path,
            destination=request_folder / f"video_{video_num}.mp4"
        )

        videos = user_data.get("videos", [])
        videos.append(f"video_{video_num}.mp4")
        await state.update_data(videos=videos)

        await message.answer(
            f"‚úÖ –í–∏–¥–µ–æ {video_num} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ",
            reply_markup=get_continue_media_kb(is_photo=False)
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")


@router.message(RequestStates.adding_photos, F.photo)
async def add_photo(message: Message, state: FSMContext):
    user_data = await state.get_data()
    request_folder = Path(user_data["current_request_folder"])

    # –ù—É–º–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ
    photo_num = len(list(request_folder.glob("photo_*.jpg"))) + 1
    if photo_num > 20:
        await message.answer("‚ùå –õ–∏–º–∏—Ç: 20 —Ñ–æ—Ç–æ –Ω–∞ –∑–∞–ø—Ä–æ—Å")
        return

    try:
        photo = message.photo[-1]
        file = await message.bot.get_file(photo.file_id)
        await message.bot.download_file(
            file.file_path,
            destination=request_folder / f"photo_{photo_num}.jpg"
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º state
        photos = user_data.get("photos", [])
        photos.append(f"photo_{photo_num}.jpg")
        await state.update_data(photos=photos)

        await message.answer(
            f"‚úÖ –§–æ—Ç–æ {photo_num} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ",
            reply_markup=get_continue_media_kb(is_photo=True)
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message(RequestStates.adding_videos, F.video)
async def add_video(message: Message, state: FSMContext):
    user_data = await state.get_data()
    request_folder = Path(user_data["current_request_folder"])

    # –ù—É–º–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ
    video_num = len(list(request_folder.glob("video_*.mp4"))) + 1
    if video_num > 20:
        await message.answer("‚ùå –õ–∏–º–∏—Ç: 20 –≤–∏–¥–µ–æ –Ω–∞ –∑–∞–ø—Ä–æ—Å")
        return

    try:
        video = message.video
        file = await message.bot.get_file(video.file_id)
        await message.bot.download_file(
            file.file_path,
            destination=request_folder / f"video_{video_num}.mp4"
        )

        videos = user_data.get("videos", [])
        videos.append(f"video_{video_num}.mp4")
        await state.update_data(videos=videos)

        await message.answer(
            f"‚úÖ –í–∏–¥–µ–æ {video_num} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ",
            reply_markup=get_continue_media_kb(is_photo=False)
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.callback_query(F.data.in_(["switch_to_photo", "switch_to_video"]))
async def switch_media_type(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "switch_to_photo":
        await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:")
        await state.set_state(RequestStates.adding_photos)
    else:
        await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ:")
        await state.set_state(RequestStates.adding_videos)
    await callback.answer()


@router.callback_query(F.data.in_(["continue_photo", "continue_video"]))
async def continue_adding_media(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "continue_photo":
        await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ:")
        await state.set_state(RequestStates.adding_photos)
    else:
        await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ:")
        await state.set_state(RequestStates.adding_videos)
    await callback.answer()


@router.callback_query(F.data == "finish_media")
async def finish_adding_media(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞–ø—Ä–æ—Å–∞:",
        reply_markup=get_finish_kb()
    )
    await state.set_state(RequestStates.confirm_finish)
    await callback.answer()


@router.callback_query(RequestStates.confirm_finish, F.data == "finish")
async def finish_request(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    request_folder = Path(user_data["current_request_folder"])

    if not request_folder.exists():
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–∞–ø–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–ø—Ä–æ—Å–µ
    with open(request_folder / "request_info.txt", "w") as f:
        f.write(f"–î–∏–ª–µ—Ä: {user_data['dealer_code']}\n")
        f.write(f"–î–∞—Ç–∞: {datetime.now()}\n")
        f.write(f"–§–æ—Ç–æ: {len(user_data.get('photos', []))}\n")
        f.write(f"–í–∏–¥–µ–æ: {len(user_data.get('videos', []))}\n")

    await callback.message.answer(
        f"‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ 'üöÄ Start' –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞",
        reply_markup=get_reply_kb()
    )
    await state.clear()
    await callback.answer()


@router.callback_query(RequestStates.confirm_finish, F.data == "restart")
async def restart_request(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å. –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:")
    await state.set_state(RequestStates.waiting_problem_description)
    await callback.answer()