import os
from aiogram import Router, F, types
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from Project.utils import get_today_folder, load_dealer_codes, save_dealer_codes
from dotenv import load_dotenv


router = Router()
load_dotenv()
ADMIN_ID=os.getenv("ADMIN_ID")
dealer_codes = load_dealer_codes()

router = Router()
dealer_codes = load_dealer_codes()

class Registration(StatesGroup):
    waiting_for_code = State()

@router.message(F.text.startswith("/start"))
async def start_command(message: types.Message, state: FSMContext):
    args = message.text.split()
    user_id = message.from_user.id

    if user_id in dealer_codes:
        await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {dealer_codes[user_id]}!\n"
            "–ù–∞–∂–º–∏—Ç–µ '–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=[[types.KeyboardButton(text="üÜï –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")]],
                resize_keyboard=True
            )
        )
    else:
        if len(args) == 2:
            dealer_code = args[1].strip()
            dealer_codes[user_id] = dealer_code
            save_dealer_codes(dealer_codes)
            await message.answer(
                f"‚úÖ –ö–æ–¥ –î–∏–ª–µ—Ä–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {dealer_code}\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –Ω–∞–∂–∞–≤ '–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å'.",
                reply_markup=types.ReplyKeyboardMarkup(
                    keyboard=[[types.KeyboardButton(text="üÜï –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")]],
                    resize_keyboard=True
                )
            )
        else:
            await message.answer(
                "üëã –ü—Ä–∏–≤–µ—Ç! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                "`/start –í–ê–®_–ö–û–î_–î–ò–õ–ï–†–ê`",
                parse_mode="Markdown"
            )

@router.message(F.text == "/change_code")
async def change_code(message: types.Message, state: FSMContext):
    if message.from_user.id == ADMIN_ID:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–æ–≤—ã–π –∫–æ–¥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n`123456789 NEWCODE`", parse_mode="Markdown")
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –¥–∏–ª–µ—Ä–∞.")

@router.message(F.text.regexp(r"^\d+\s+\S+$"))
async def admin_change_code(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        user_id_str, new_code = message.text.split(maxsplit=1)
        user_id = int(user_id_str)
        dealer_codes[user_id] = new_code.strip()
        save_dealer_codes(dealer_codes)
        await message.answer(f"‚úÖ –ö–æ–¥ –¥–∏–ª–µ—Ä–∞ –¥–ª—è {user_id} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {new_code}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")
