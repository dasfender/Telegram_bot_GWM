import os
from aiogram import Router, F, types
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from utils import get_today_folder, load_dealer_codes, save_dealer_codes
from dotenv import load_dotenv

router = Router()
load_dotenv()
ADMIN_ID=os.getenv("ADMIN_ID")
dealer_codes = load_dealer_codes()

class Form(StatesGroup):
    waiting_for_code = State()
    waiting_for_text = State()
    waiting_for_photo = State()
    waiting_for_video = State()
    waiting_more_material = State()
    waiting_new_request = State()


def get_photo_video_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì∑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ")],
            [KeyboardButton(text="üé• –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ")],
            [KeyboardButton(text="üîÑ –°–º–µ–Ω–∏—Ç—å –ö–æ–¥ –î–∏–ª–µ—Ä–∞")]
        ],
        resize_keyboard=True
    )

def get_yes_no_keyboard(yes_text="–î–∞", no_text="–ù–µ—Ç"):
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=yes_text)],
            [KeyboardButton(text=no_text)]
        ],
        resize_keyboard=True
    )

def get_start_work_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ù–∞–±—Ä–∞—Ç—å —Ç–µ–∫—Å—Ç")]
        ],
        resize_keyboard=True
    )


@router.message(F.text == "/start")
async def start_command(message: types.Message, state: FSMContext):
    if message.from_user.id in dealer_codes:
        await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {dealer_codes[message.from_user.id]}!",
            reply_markup=get_start_work_keyboard()
        )
        await state.clear()
    else:
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ö–æ–¥ –î–∏–ª–µ—Ä–∞:")
        await state.set_state(Form.waiting_for_code)


@router.message(F.text == "üîÑ –°–º–µ–Ω–∏—Ç—å –ö–æ–¥ –î–∏–ª–µ—Ä–∞")
@router.message(F.text == "/change_code")
async def change_code(message: types.Message, state: FSMContext):
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ö–æ–¥ –î–∏–ª–µ—Ä–∞:")
    await state.set_state(Form.waiting_for_code)


@router.message(Form.waiting_for_code, F.content_type == "text")
async def set_dealer_code(message: types.Message, state: FSMContext):
    dealer_code = message.text.strip()
    dealer_codes[message.from_user.id] = dealer_code
    save_dealer_codes(dealer_codes)

    await message.answer(
        f"‚úÖ –ö–æ–¥ –î–∏–ª–µ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {dealer_code}\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.",
        reply_markup=get_start_work_keyboard()
    )
    await state.clear()


@router.message(F.text == "–ù–∞–±—Ä–∞—Ç—å —Ç–µ–∫—Å—Ç")
async def start_typing_text(message: types.Message, state: FSMContext):
    await message.answer("‚úçÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(Form.waiting_for_text)


@router.message(Form.waiting_for_text, F.content_type == "text")
async def handle_text(message: types.Message, state: FSMContext):
    dealer_code = dealer_codes.get(message.from_user.id, f"user_{message.from_user.id}")
    folder = get_today_folder(dealer_code)
    os.makedirs(folder, exist_ok=True)
    file_path = os.path.join(folder, f"text_{dealer_code}_{message.message_id}.txt")

    with open(file_path, "w", encoding="utf-8") as f:
        f.write(message.text)

    await message.bot.send_message(
        ADMIN_ID,
        f"üì© –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ—Ç {dealer_code}:\n{message.text}"
    )

    await message.reply(
        "‚úÖ –¢–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.",
        reply_markup=get_photo_video_keyboard()
    )
    await state.set_state(Form.waiting_more_material)


@router.message(Form.waiting_for_photo)
async def handle_photo(message: types.Message, state: FSMContext):
    if message.content_type != "photo":
        await message.reply("‚ùó –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ.")
        return

    dealer_code = dealer_codes.get(message.from_user.id, f"user_{message.from_user.id}")
    folder = get_today_folder(dealer_code)
    os.makedirs(folder, exist_ok=True)
    file_path = os.path.join(folder, f"photo_{dealer_code}_{message.message_id}.jpg")

    photo = message.photo[-1]  # —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä
    file = await message.bot.get_file(photo.file_id)
    await message.bot.download_file(file.file_path, destination=file_path)

    await message.bot.send_photo(
        ADMIN_ID,
        photo=photo.file_id,
        caption=f"üì∑ –§–æ—Ç–æ –æ—Ç {dealer_code}"
    )

    await message.reply(
        "‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ.\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –º–∞—Ç–µ—Ä–∏–∞–ª?",
        reply_markup=get_yes_no_keyboard("–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", "–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É")
    )
    await state.set_state(Form.waiting_more_material)


@router.message(Form.waiting_for_video)
async def handle_video(message: types.Message, state: FSMContext):
    if message.content_type != "video":
        await message.reply("‚ùó –û–∂–∏–¥–∞–µ—Ç—Å—è –≤–∏–¥–µ–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –≤–∏–¥–µ–æ.")
        return

    dealer_code = dealer_codes.get(message.from_user.id, f"user_{message.from_user.id}")
    folder = get_today_folder(dealer_code)
    os.makedirs(folder, exist_ok=True)
    file_path = os.path.join(folder, f"video_{dealer_code}_{message.message_id}.mp4")

    await message.video.download(destination_file=file_path)

    await message.bot.send_video(
        ADMIN_ID,
        video=message.video.file_id,
        caption=f"üé• –í–∏–¥–µ–æ –æ—Ç {dealer_code}"
    )

    await message.reply(
        "‚úÖ –í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ.\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –º–∞—Ç–µ—Ä–∏–∞–ª?",
        reply_markup=get_yes_no_keyboard("–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", "–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É")
    )
    await state.set_state(Form.waiting_more_material)


@router.message(Form.waiting_more_material, F.text == "–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë")
async def more_material(message: types.Message, state: FSMContext):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:",
        reply_markup=get_photo_video_keyboard()
    )
    # —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –º–µ–Ω—è–µ–º, –æ—Å—Ç–∞—ë–º—Å—è –∑–¥–µ—Å—å


@router.message(Form.waiting_more_material, F.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É")
async def finish_material(message: types.Message, state: FSMContext):
    await message.answer(
        "üìå –•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å?",
        reply_markup=get_yes_no_keyboard("–î–∞", "–ù–µ—Ç")
    )
    await state.set_state(Form.waiting_new_request)


@router.message(Form.waiting_new_request, F.text == "–î–∞")
async def start_new_request(message: types.Message, state: FSMContext):
    await message.answer("‚úçÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(Form.waiting_for_text)


@router.message(Form.waiting_new_request, F.text == "–ù–µ—Ç")
async def exit_bot(message: types.Message, state: FSMContext):
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏—Ç–µ /start", reply_markup=types.ReplyKeyboardRemove())
    await state.clear()


@router.message(Form.waiting_more_material, F.text == "üì∑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ")
async def ask_photo(message: types.Message, state: FSMContext):
    await message.answer("üì∑ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ.", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(Form.waiting_for_photo)


@router.message(Form.waiting_more_material, F.text == "üé• –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ")
async def ask_video(message: types.Message, state: FSMContext):
    await message.answer("üé• –ü—Ä–∏—à–ª–∏—Ç–µ –≤–∏–¥–µ–æ.", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(Form.waiting_for_video)